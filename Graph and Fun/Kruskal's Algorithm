#include <bits/stdc++.h>
using namespace std;
int V;

void Addedges(int a,int b,int w,vector<pair<int,pair<int,int>>> &edgelist)
{
    edgelist.push_back({w,{a,b}}); // Here we are presenting the graph
    // Not with adjacency list, but with the edges list
}

class DSU // A class to create disjoint set union
{
    public:
    int *parent=new int[V],*rank=new int[V];
    DSU()
    {
        for(int i=0;i<V;i++)
        {rank[i]=0;parent[i]=i;}
    }
    int findParent(int v)
    {
        if(v!=parent[v])
        parent[v]=findParent(parent[v]);
        return parent[v];
    }
    void mergesets(int a,int b)
    {
        a=findParent(a);b=findParent(b);
        if(rank[a]>rank[b])
        parent[a]=b;
        else
        {
            parent[b]=a;
        }
        if(rank[a]==rank[b])
        rank[b]++;
    }
};

int MST(vector<pair<int,pair<int,int>>> edgelist)
{
    int w=0;
    sort(edgelist.begin(),edgelist.end()); // This is a greedy algorithm
    DSU dsu; //Object of Disjoint set union
    vector<pair<int,pair<int,int>>>::iterator i;
    cout<<"Here we get the Minimum spanning tree, where :"<<endl;
    for(i=edgelist.begin();i!=edgelist.end();i++)
    {
        int a=i->second.first;
        int b=i->second.second;
        int parent_a=dsu.findParent(a),parent_b=dsu.findParent(b);
        if(parent_a!=parent_b)
        {
            cout<<"Edge present between "<<a<<" - "<<b<<" and weight "<<i->first<<endl;
            w+=i->first;
            dsu.mergesets(parent_a,parent_b); // Merging Disjoint sets
        }
    }
    return w;
}

int main()
{
    V=9;
    vector<pair<int,pair<int,int>>> edgelist;
    Addedges(0,1,3,edgelist);Addedges(1,2,8,edgelist);Addedges(1,3,5,edgelist);
    Addedges(0,3,4,edgelist);Addedges(3,4,2,edgelist);Addedges(0,6,2,edgelist);
    Addedges(6,4,5,edgelist);Addedges(4,5,2,edgelist);Addedges(7,5,1,edgelist);
    Addedges(2,5,7,edgelist);Addedges(2,7,6,edgelist);Addedges(3,7,2,edgelist);
    // Added all the edges
    int Min_Weight=MST(edgelist);
    cout<<"\nWeight of the MST is : "<<Min_Weight;

}

